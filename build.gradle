plugins {
    id 'scala'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'com.palantir.docker' version '0.34.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://repository.apache.org/content/repositories/snapshots"
        mavenContent {
            snapshotsOnly()
        }
    }
}

wrapper {
    gradleVersion = '7.5'
    distributionType = Wrapper.DistributionType.ALL
}

// Key project properties
project.group = 'org.myorg.quickstart'
project.version = '0.0.1-SNAPSHOT'
project.description = "Flink Quickstart Job"

// Extra properties
ext {
    javaVersion = '1.8'
    flinkVersion = '1.15.1'
    scalaBinaryVersion = '2.12'
    slf4jVersion = '1.7.32'
    log4jVersion = '2.17.1'
}

application {
    mainClassName = 'org.myorg.quickstart.DataStreamJob'
    applicationDefaultJvmArgs = ["-Dlog4j.configurationFile=log4j2.properties"]
}

// NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
// in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
// shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
// -> Explicitly define the libraries we want to be included in the "flinkShadowJar" configuration!
// (leaving implementation and runtimeOnly for local runs and flinkShadowJar for production use on a cluster)
configurations {
    flinkShadowJar // dependencies which go into the shadowJar

    // always exclude these (also from transitive dependencies) since they are provided by Flink
    flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
    flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
    flinkShadowJar.exclude group: 'org.slf4j'
    flinkShadowJar.exclude group: 'org.apache.logging.log4j'
}

dependencies {
    implementation "org.apache.flink:flink-streaming-scala_${scalaBinaryVersion}:${flinkVersion}"
    implementation "org.apache.flink:flink-clients:${flinkVersion}"

    //flinkShadowJar "..."

    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    runtimeOnly "org.apache.logging.log4j:log4j-core:${log4jVersion}"
}

sourceSets {
    main.compileClasspath += configurations.flinkShadowJar
    main.runtimeClasspath += configurations.flinkShadowJar

    test.compileClasspath += configurations.flinkShadowJar
    test.runtimeClasspath += configurations.flinkShadowJar

    javadoc.classpath += configurations.flinkShadowJar
}
run.classpath = sourceSets.main.runtimeClasspath

jar {
    manifest {
        attributes 'Build-Jdk': System.getProperty('java.version')
    }
}

shadowJar {
    configurations = [project.configurations.flinkShadowJar]
    archiveClassifier.set('fat')
}

docker {
    name "hub.docker.com/yourorg/quickstart:$version"
    dockerfile file('Dockerfile')

    def shadowJar = tasks.shadowJar.outputs.files.singleFile
    files shadowJar // copy shadowJar to docker build context (<project>/build/docker/<shadow jar>)
    buildArgs([JAR_NAME: "${shadowJar.name}"])
    noCache true
}

// DAG configuration
dockerClean.dependsOn(shadowJar) // run docker related tasks after shadowJar